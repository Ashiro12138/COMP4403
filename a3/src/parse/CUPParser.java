
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parse;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import source.*;
import tree.DeclNode;
import tree.ConstExp;
import tree.StatementNode;
import tree.ExpNode;
import tree.Operator;
import syms.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CUPParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return CUPToken.class;
}

  /** Default constructor. */
  @Deprecated
  public CUPParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CUPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CUPParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\046\002\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\003\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\002\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\006\003\000\002" +
    "\006\004\000\002\007\006\000\002\007\003\000\002\010" +
    "\003\000\002\010\004\000\002\010\003\000\002\010\003" +
    "\000\002\011\003\000\002\011\004\000\002\012\006\000" +
    "\002\012\003\000\002\013\003\000\002\013\007\000\002" +
    "\013\003\000\002\014\003\000\002\015\003\000\002\015" +
    "\004\000\002\016\006\000\002\016\003\000\002\017\006" +
    "\000\002\020\007\000\002\020\005\000\002\022\003\000" +
    "\002\022\002\000\002\021\003\000\002\021\005\000\002" +
    "\042\007\000\002\042\006\000\002\042\006\000\002\042" +
    "\005\000\002\042\003\000\002\044\004\000\002\045\004" +
    "\000\002\027\005\000\002\025\003\000\002\025\005\000" +
    "\002\026\006\000\002\026\010\000\002\026\003\000\002" +
    "\026\004\000\002\026\004\000\002\026\005\000\002\026" +
    "\007\000\002\026\003\000\002\024\003\000\002\024\002" +
    "\000\002\023\003\000\002\023\005\000\002\043\005\000" +
    "\002\043\004\000\002\041\003\000\002\041\003\000\002" +
    "\030\003\000\002\031\003\000\002\031\005\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\032\003\000" +
    "\002\032\005\000\002\036\003\000\002\036\003\000\002" +
    "\033\003\000\002\033\005\000\002\037\003\000\002\037" +
    "\003\000\002\034\004\000\002\034\004\000\002\034\005" +
    "\000\002\034\003\000\002\034\003\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\016\003\005\030\001\032\001\037\001\042" +
    "\001\043\001\001\002\000\004\002\226\001\002\000\004" +
    "\002\ufffe\001\002\000\014\030\ufffa\032\ufffa\037\ufffa\042" +
    "\ufffa\043\ufffa\001\002\000\004\002\000\001\002\000\014" +
    "\030\020\032\021\037\011\042\017\043\013\001\002\000" +
    "\004\047\177\001\002\000\006\002\ufffd\004\ufffd\001\002" +
    "\000\006\003\170\047\172\001\002\000\014\030\ufffc\032" +
    "\ufffc\037\ufffc\042\ufffc\043\ufffc\001\002\000\014\030\ufffb" +
    "\032\ufffb\037\ufffb\042\ufffb\043\ufffb\001\002\000\004\014" +
    "\164\001\002\000\006\003\144\047\145\001\002\000\022" +
    "\003\046\030\020\031\041\036\050\040\043\044\037\045" +
    "\045\047\047\001\002\000\006\003\022\047\024\001\002" +
    "\000\020\003\ufff3\030\ufff3\032\ufff3\037\ufff3\042\ufff3\043" +
    "\ufff3\047\ufff3\001\002\000\020\003\022\030\ufff9\032\ufff9" +
    "\037\ufff9\042\ufff9\043\ufff9\047\024\001\002\000\004\014" +
    "\026\001\002\000\020\003\ufff6\030\ufff6\032\ufff6\037\ufff6" +
    "\042\ufff6\043\ufff6\047\ufff6\001\002\000\012\003\027\011" +
    "\032\047\031\050\030\001\002\000\010\004\uffef\022\uffef" +
    "\027\uffef\001\002\000\010\004\ufff2\022\ufff2\027\ufff2\001" +
    "\002\000\010\004\ufff0\022\ufff0\027\ufff0\001\002\000\012" +
    "\003\027\011\032\047\031\050\030\001\002\000\004\004" +
    "\034\001\002\000\020\003\ufff4\030\ufff4\032\ufff4\037\ufff4" +
    "\042\ufff4\043\ufff4\047\ufff4\001\002\000\010\004\ufff1\022" +
    "\ufff1\027\ufff1\001\002\000\020\003\ufff5\030\ufff5\032\ufff5" +
    "\037\ufff5\042\ufff5\043\ufff5\047\ufff5\001\002\000\016\003" +
    "\062\010\060\011\053\024\065\047\047\050\055\001\002" +
    "\000\010\004\uffcf\034\uffcf\035\uffcf\001\002\000\004\047" +
    "\125\001\002\000\006\004\122\035\123\001\002\000\006" +
    "\003\062\047\047\001\002\000\006\004\uffd3\035\uffd3\001" +
    "\002\000\016\003\062\010\060\011\053\024\065\047\047" +
    "\050\055\001\002\000\012\004\uffca\006\uffc2\034\uffca\035" +
    "\uffca\001\002\000\046\004\uffc3\006\uffc3\010\uffc3\011\uffc3" +
    "\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\023\uffc3\025\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\041\uffc3\001\002\000\016\003\062\010\060\011\053\024" +
    "\065\047\047\050\055\001\002\000\004\006\052\001\002" +
    "\000\016\003\062\010\060\011\053\024\065\047\047\050" +
    "\055\001\002\000\016\003\uffab\010\uffab\011\uffab\024\uffab" +
    "\047\uffab\050\uffab\001\002\000\020\004\uffc1\023\uffc1\025" +
    "\uffc1\033\uffc1\034\uffc1\035\uffc1\041\uffc1\001\002\000\044" +
    "\004\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015" +
    "\uffad\016\uffad\017\uffad\020\uffad\021\uffad\023\uffad\025\uffad" +
    "\033\uffad\034\uffad\035\uffad\041\uffad\001\002\000\040\004" +
    "\uffc0\010\103\011\077\014\110\015\101\016\100\017\104" +
    "\020\106\021\102\023\uffc0\025\uffc0\033\uffc0\034\uffc0\035" +
    "\uffc0\041\uffc0\001\002\000\010\004\uffcc\034\uffcc\035\uffcc" +
    "\001\002\000\016\003\062\010\060\011\053\024\065\047" +
    "\047\050\055\001\002\000\044\004\uffb8\010\uffb8\011\uffb8" +
    "\012\073\013\072\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\023\uffb8\025\uffb8\033\uffb8\034\uffb8\035\uffb8" +
    "\041\uffb8\001\002\000\044\004\uffc2\010\uffc2\011\uffc2\012" +
    "\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2" +
    "\021\uffc2\023\uffc2\025\uffc2\033\uffc2\034\uffc2\035\uffc2\041" +
    "\uffc2\001\002\000\044\004\uffb4\010\uffb4\011\uffb4\012\uffb4" +
    "\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021" +
    "\uffb4\023\uffb4\025\uffb4\033\uffb4\034\uffb4\035\uffb4\041\uffb4" +
    "\001\002\000\016\003\062\010\060\011\053\024\065\047" +
    "\047\050\055\001\002\000\016\003\062\010\060\011\053" +
    "\024\065\047\047\050\055\001\002\000\044\004\uffac\010" +
    "\uffac\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac" +
    "\017\uffac\020\uffac\021\uffac\023\uffac\025\uffac\033\uffac\034" +
    "\uffac\035\uffac\041\uffac\001\002\000\004\025\070\001\002" +
    "\000\044\004\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014" +
    "\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\023\uffae" +
    "\025\uffae\033\uffae\034\uffae\035\uffae\041\uffae\001\002\000" +
    "\044\004\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf" +
    "\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\023\uffaf\025" +
    "\uffaf\033\uffaf\034\uffaf\035\uffaf\041\uffaf\001\002\000\016" +
    "\003\uffb1\010\uffb1\011\uffb1\024\uffb1\047\uffb1\050\uffb1\001" +
    "\002\000\016\003\uffb2\010\uffb2\011\uffb2\024\uffb2\047\uffb2" +
    "\050\uffb2\001\002\000\016\003\062\010\060\011\053\024" +
    "\065\047\047\050\055\001\002\000\044\004\uffb3\010\uffb3" +
    "\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017" +
    "\uffb3\020\uffb3\021\uffb3\023\uffb3\025\uffb3\033\uffb3\034\uffb3" +
    "\035\uffb3\041\uffb3\001\002\000\044\004\uffb0\010\uffb0\011" +
    "\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0" +
    "\020\uffb0\021\uffb0\023\uffb0\025\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\041\uffb0\001\002\000\016\003\uffb5\010\uffb5\011\uffb5" +
    "\024\uffb5\047\uffb5\050\uffb5\001\002\000\016\003\uffbc\010" +
    "\uffbc\011\uffbc\024\uffbc\047\uffbc\050\uffbc\001\002\000\016" +
    "\003\uffbd\010\uffbd\011\uffbd\024\uffbd\047\uffbd\050\uffbd\001" +
    "\002\000\016\003\uffba\010\uffba\011\uffba\024\uffba\047\uffba" +
    "\050\uffba\001\002\000\016\003\uffb6\010\uffb6\011\uffb6\024" +
    "\uffb6\047\uffb6\050\uffb6\001\002\000\016\003\uffb9\010\uffb9" +
    "\011\uffb9\024\uffb9\047\uffb9\050\uffb9\001\002\000\016\003" +
    "\062\010\060\011\053\024\065\047\047\050\055\001\002" +
    "\000\016\003\uffbb\010\uffbb\011\uffbb\024\uffbb\047\uffbb\050" +
    "\uffbb\001\002\000\016\003\062\010\060\011\053\024\065" +
    "\047\047\050\055\001\002\000\016\003\uffbe\010\uffbe\011" +
    "\uffbe\024\uffbe\047\uffbe\050\uffbe\001\002\000\024\004\uffbf" +
    "\010\103\011\077\023\uffbf\025\uffbf\033\uffbf\034\uffbf\035" +
    "\uffbf\041\uffbf\001\002\000\044\004\uffb7\010\uffb7\011\uffb7" +
    "\012\073\013\072\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020" +
    "\uffb7\021\uffb7\023\uffb7\025\uffb7\033\uffb7\034\uffb7\035\uffb7" +
    "\041\uffb7\001\002\000\004\041\114\001\002\000\022\003" +
    "\046\030\020\031\041\036\050\040\043\044\037\045\045" +
    "\047\047\001\002\000\004\034\116\001\002\000\022\003" +
    "\046\030\020\031\041\036\050\040\043\044\037\045\045" +
    "\047\047\001\002\000\010\004\uffd0\034\uffd0\035\uffd0\001" +
    "\002\000\014\004\uffcd\010\103\011\077\034\uffcd\035\uffcd" +
    "\001\002\000\010\004\uffce\034\uffce\035\uffce\001\002\000" +
    "\022\003\046\030\020\031\041\036\050\040\043\044\037" +
    "\045\045\047\047\001\002\000\012\002\uffd4\004\uffd4\034" +
    "\uffd4\035\uffd4\001\002\000\006\004\uffd2\035\uffd2\001\002" +
    "\000\004\024\126\001\002\000\006\025\uffc8\047\131\001" +
    "\002\000\004\025\140\001\002\000\006\023\uffc7\025\uffc7" +
    "\001\002\000\006\003\136\007\135\001\002\000\006\023" +
    "\133\025\uffc9\001\002\000\004\047\131\001\002\000\006" +
    "\023\uffc6\025\uffc6\001\002\000\016\003\062\010\060\011" +
    "\053\024\065\047\047\050\055\001\002\000\006\023\uffc4" +
    "\025\uffc4\001\002\000\006\023\uffc5\025\uffc5\001\002\000" +
    "\010\004\uffcb\034\uffcb\035\uffcb\001\002\000\004\033\142" +
    "\001\002\000\022\003\046\030\020\031\041\036\050\040" +
    "\043\044\037\045\045\047\047\001\002\000\010\004\uffd1" +
    "\034\uffd1\035\uffd1\001\002\000\020\003\uffeb\030\uffeb\032" +
    "\uffeb\037\uffeb\042\uffeb\043\uffeb\047\uffeb\001\002\000\004" +
    "\014\151\001\002\000\020\003\uffee\030\uffee\032\uffee\037" +
    "\uffee\042\uffee\043\uffee\047\uffee\001\002\000\020\003\144" +
    "\030\ufff8\032\ufff8\037\ufff8\042\ufff8\043\ufff8\047\145\001" +
    "\002\000\020\003\uffed\030\uffed\032\uffed\037\uffed\042\uffed" +
    "\043\uffed\047\uffed\001\002\000\010\003\153\026\156\047" +
    "\154\001\002\000\004\004\163\001\002\000\004\004\uffe8" +
    "\001\002\000\012\004\uffe7\007\uffe7\023\uffe7\025\uffe7\001" +
    "\002\000\004\004\uffea\001\002\000\012\003\027\011\032" +
    "\047\031\050\030\001\002\000\004\022\160\001\002\000" +
    "\012\003\027\011\032\047\031\050\030\001\002\000\004" +
    "\027\162\001\002\000\004\004\uffe9\001\002\000\020\003" +
    "\uffec\030\uffec\032\uffec\037\uffec\042\uffec\043\uffec\047\uffec" +
    "\001\002\000\014\030\ufffa\032\ufffa\037\ufffa\042\ufffa\043" +
    "\ufffa\001\002\000\004\004\166\001\002\000\014\030\uffe2" +
    "\032\uffe2\037\uffe2\042\uffe2\043\uffe2\001\002\000\020\003" +
    "\170\030\ufff7\032\ufff7\037\ufff7\042\ufff7\043\ufff7\047\172" +
    "\001\002\000\020\003\uffe3\030\uffe3\032\uffe3\037\uffe3\042" +
    "\uffe3\043\uffe3\047\uffe3\001\002\000\020\003\uffe6\030\uffe6" +
    "\032\uffe6\037\uffe6\042\uffe6\043\uffe6\047\uffe6\001\002\000" +
    "\004\005\173\001\002\000\004\047\154\001\002\000\004" +
    "\004\175\001\002\000\020\003\uffe4\030\uffe4\032\uffe4\037" +
    "\uffe4\042\uffe4\043\uffe4\047\uffe4\001\002\000\020\003\uffe5" +
    "\030\uffe5\032\uffe5\037\uffe5\042\uffe5\043\uffe5\047\uffe5\001" +
    "\002\000\006\003\200\024\201\001\002\000\004\014\uffe0" +
    "\001\002\000\012\003\203\025\uffde\043\207\047\205\001" +
    "\002\000\006\023\uffdd\025\uffdd\001\002\000\006\023\uffd7" +
    "\025\uffd7\001\002\000\006\023\224\025\uffdf\001\002\000" +
    "\004\005\217\001\002\000\004\025\216\001\002\000\004" +
    "\047\210\001\002\000\004\005\211\001\002\000\004\047" +
    "\154\001\002\000\010\007\213\023\uffda\025\uffda\001\002" +
    "\000\006\003\062\047\047\001\002\000\006\023\uffdb\025" +
    "\uffdb\001\002\000\006\023\uffd6\025\uffd6\001\002\000\004" +
    "\014\uffe1\001\002\000\004\047\154\001\002\000\010\007" +
    "\221\023\uffd8\025\uffd8\001\002\000\016\003\062\010\060" +
    "\011\053\024\065\047\047\050\055\001\002\000\006\023" +
    "\uffd9\025\uffd9\001\002\000\006\023\uffd5\025\uffd5\001\002" +
    "\000\010\003\203\043\207\047\205\001\002\000\006\023" +
    "\uffdc\025\uffdc\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\006\002\003\046\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\006\004\007\001\001" +
    "\000\002\001\001\000\012\005\014\017\013\020\015\027" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\166\016\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\146\012\145\001\001" +
    "\000\012\025\041\026\043\027\037\041\050\001\001\000" +
    "\006\006\022\007\024\001\001\000\002\001\001\000\004" +
    "\007\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\030\140\031\053\032\055\033\060\034\062\040" +
    "\063\041\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\120\001\001\000\002\001" +
    "\001\000\014\032\117\033\060\034\062\040\063\041\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\030" +
    "\112\031\053\032\055\033\060\034\062\040\063\041\065" +
    "\001\001\000\002\001\001\000\020\030\056\031\053\032" +
    "\055\033\060\034\062\040\063\041\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\035" +
    "\106\036\104\001\001\000\002\001\001\000\010\034\075" +
    "\040\063\041\065\001\001\000\004\037\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\034\070\040\063" +
    "\041\065\001\001\000\020\030\066\031\053\032\055\033" +
    "\060\034\062\040\063\041\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\034\074\040\063" +
    "\041\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\033" +
    "\111\034\062\040\063\041\065\001\001\000\002\001\001" +
    "\000\014\032\110\033\060\034\062\040\063\041\065\001" +
    "\001\000\002\001\001\000\004\036\104\001\001\000\004" +
    "\037\073\001\001\000\002\001\001\000\010\026\114\027" +
    "\037\041\050\001\001\000\002\001\001\000\010\026\116" +
    "\027\037\041\050\001\001\000\002\001\001\000\004\036" +
    "\104\001\001\000\002\001\001\000\010\026\123\027\037" +
    "\041\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\131\024\126\043\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\133\001\001\000\002\001\001" +
    "\000\020\030\136\031\053\032\055\033\060\034\062\040" +
    "\063\041\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\026\142\027" +
    "\037\041\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\147\001" +
    "\001\000\002\001\001\000\006\013\151\014\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\156\001\001\000\002\001\001" +
    "\000\004\010\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\164\004\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\021\203\022\205\042\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\211\001\001\000\004\044\213\001\001\000\004" +
    "\041\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\217\001\001\000\004\045\221" +
    "\001\001\000\020\030\222\031\053\032\055\033\060\034" +
    "\062\040\063\041\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\224\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CUPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CUPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CUPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /* This section provides some methods used by Java_CUP during parsing.
     * They override its default methods for reporting syntax errors. */
        
    /** Retrieve the error handler to handle error messages. */
    private Errors errors = ErrorHandler.getErrorHandler();
    
    /** Override the default CUP syntax_error method with one 
     * that integrates better with the compiler's error reporting. */
    @Override
    public void syntax_error(Symbol cur_token) {
        errors.error("PL0 syntax error", ((ComplexSymbol) cur_token).xleft);
    }
    /** Override the default CUP unrecovered_syntax_error method with one 
     * that integrates better with the compiler's error reporting. */
    @Override
    public void unrecovered_syntax_error(Symbol cur_token) {
        errors.error("PL0 unrecovered syntax error", 
                        ((ComplexSymbol) cur_token).xleft);
    }
            


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CUPParser$actions {

  /* This section provides global variables and methods used in the
     * semantics actions associated with parsing rules.
     * These are the only global variables you should need. */

    /** Error handler for reporting error messages. */
    private Errors errors = ErrorHandler.getErrorHandler();
    
    /** The current symbol table scope is available globally in the static checker.
     *  Its current scope corresponds to the procedure (or main program)
     *  being processed.
     */
    private Scope currentScope;


  private final CUPParser parser;

  /** Constructor */
  CUP$CUPParser$actions(CUPParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CUPParser$do_action_part00000000(
    int                        CUP$CUPParser$act_num,
    java_cup.runtime.lr_parser CUP$CUPParser$parser,
    java.util.Stack            CUP$CUPParser$stack,
    int                        CUP$CUPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CUPParser$result;

      /* select the action based on the action number */
      switch (CUP$CUPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              DeclNode.ProcedureNode RESULT =null;

            /* This action occurs before the whole program is recognised.
             * It constructs the initial symbol table with current scope the
             * predefined scope. */
            currentScope = new SymbolTable().getPredefinedScope();
            /* Set up a dummy symbol table entry for the main program */
            SymEntry.ProcedureEntry procMain = 
                currentScope.addProcedure("<main>", ErrorHandler.NO_LOCATION);
            if(procMain  == null) {
                errors.fatal("Could not add main program to symbol table",
                        ErrorHandler.NO_LOCATION);
            }
            /* Enter the scope for the main program and save the new local
             * scope in main's symbol table entry */
            currentScope = currentScope.newScope(procMain);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("NT$0",36, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= NT$0 Block 
            {
              DeclNode.ProcedureNode RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (DeclNode.ProcedureNode) ((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		StatementNode.BlockNode block = (StatementNode.BlockNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            /* This action is executed after the whole program
             * has been recognised */
            /* Returned result of the whole parsing phase */
            RESULT = new DeclNode.ProcedureNode(currentScope.getOwnerEntry(), block);
            /* Exit the current scope */
            currentScope = currentScope.getParent();
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		DeclNode.ProcedureNode start_val = (DeclNode.ProcedureNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		RESULT = start_val;
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CUPParser$parser.done_parsing();
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= error 
            {
              DeclNode.ProcedureNode RESULT =null;
		
            /* A null result from Program will cause the compiler to
             * avoid further processing. */
            RESULT = null;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Block ::= DeclarationList CompoundStatement 
            {
              StatementNode.BlockNode RESULT =null;
		Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		DeclNode.DeclListNode dl = (DeclNode.DeclListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		StatementNode b = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new StatementNode.BlockNode(bxleft, dl, b, currentScope);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Block",1, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclarationList ::= DeclarationList ProcedureDef 
            {
              DeclNode.DeclListNode RESULT =null;
		Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		DeclNode.DeclListNode dl = (DeclNode.DeclListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		DeclNode.ProcedureNode p = (DeclNode.ProcedureNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            /* Add a procedure declaration to the list of declarations */
            dl.addDeclaration(p);
            RESULT = dl;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",2, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclarationList ::= DeclarationList Declaration 
            {
              DeclNode.DeclListNode RESULT =null;
		Location dlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location dlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		DeclNode.DeclListNode dl = (DeclNode.DeclListNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            /* A non-procedure declaration is not added to the list
             * but added to the symbol table during its parsing. */
            RESULT = dl;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",2, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclarationList ::= 
            {
              DeclNode.DeclListNode RESULT =null;
		
            RESULT = new DeclNode.DeclListNode();
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",2, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaration ::= KW_CONST ConstDefSeq 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Declaration",3, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Declaration ::= KW_TYPE TypeDefSeq 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Declaration",3, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Declaration ::= KW_VAR VarDeclSeq 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Declaration",3, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDefSeq ::= ConstDef 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ConstDefSeq",4, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstDefSeq ::= ConstDefSeq ConstDef 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ConstDefSeq",4, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstDef ::= IDENTIFIER EQUALS Constant SEMICOLON 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		ConstExp c = (ConstExp)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 
            /* The attribute idxleft represents the location of the start
             * character of the IDENTIFIER token in the input stream.
             * addConstant returns null if id is already defined 
             * in the current scope */
            if(currentScope.addConstant(id, idxleft, c) == null) {
                errors.error(id + " already declared in this scope", idxleft);
            }
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ConstDef",5, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstDef ::= error 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ConstDef",5, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Constant ::= NUMBER 
            {
              ConstExp RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new ConstExp.NumberNode(nxleft, currentScope, 
                                              Predefined.INTEGER_TYPE, n); 
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Constant",6, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Constant ::= MINUS Constant 
            {
              ConstExp RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ConstExp c = (ConstExp)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new ConstExp.NegateNode(opxleft, currentScope, c); 
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Constant",6, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Constant ::= IDENTIFIER 
            {
              ConstExp RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new ConstExp.ConstIdNode(idxleft, currentScope, id);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Constant",6, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Constant ::= error 
            {
              ConstExp RESULT =null;
		Location errxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location errxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ConstExp.ErrorNode(errxleft, currentScope);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Constant",6, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TypeDefSeq ::= TypeDef 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeDefSeq",7, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TypeDefSeq ::= TypeDefSeq TypeDef 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeDefSeq",7, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TypeDef ::= IDENTIFIER EQUALS Type SEMICOLON 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 
            SymEntry.TypeEntry entry = currentScope.addType(id, idxleft, type);
            if(entry == null) {
                errors.error(id + " already declared in this scope", idxleft);
            }
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeDef",8, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TypeDef ::= error 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeDef",8, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= TypeIdentifier 
            {
              Type RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = type;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= LBRACKET Constant RANGE Constant RBRACKET 
            {
              Type RESULT =null;
		Location subrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).xleft;
		Location subrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).xright;
		Object subr = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).value;
		Location loxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xleft;
		Location loxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xright;
		ConstExp lo = (ConstExp)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		Location hixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location hixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		ConstExp hi = (ConstExp)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            RESULT = new Type.SubrangeType(subrxleft, lo, hi);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Type ::= error 
            {
              Type RESULT =null;
		Location errxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location errxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = Type.ERROR_TYPE;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TypeIdentifier ::= IDENTIFIER 
            {
              Type RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 /* As the type identifier may not be defined at this point.
            * IdRefType records the id, as well as the symbol table scope
            * to look it up during type resolution in the static checker.
            */
            RESULT = new Type.IdRefType(idxleft, id, currentScope);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("TypeIdentifier",10, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VarDeclSeq ::= VarDecl 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("VarDeclSeq",11, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VarDeclSeq ::= VarDeclSeq VarDecl 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("VarDeclSeq",11, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VarDecl ::= IDENTIFIER COLON TypeIdentifier SEMICOLON 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 
            // Variables are always of ReferenceType.
            Type.ReferenceType varType = new Type.ReferenceType(type);
            System.out.println("VarDecl: adding vars to scope level of " + currentScope
            .getLevel());
            if(currentScope.addVariable(id, idxleft, varType) == null) {
                errors.error(id + " already declared in this scope", idxleft);
            }
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("VarDecl",12, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VarDecl ::= error 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("VarDecl",12, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ProcedureDef ::= ProcedureHead EQUALS Block SEMICOLON 
            {
              DeclNode.ProcedureNode RESULT =null;
		Location procEntryxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xleft;
		Location procEntryxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xright;
		SymEntry.ProcedureEntry procEntry = (SymEntry.ProcedureEntry)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		StatementNode.BlockNode b = (StatementNode.BlockNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            /* Executed after recognising the whole procedure.
             * Exit the scope created during the parsing action
             * for ProcedureHead. */
            currentScope = currentScope.getParent();
            RESULT = new DeclNode.ProcedureNode(procEntry, b);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ProcedureDef",13, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ProcedureHead ::= KW_PROCEDURE IDENTIFIER LPAREN OptFormalParamList RPAREN 
            {
              SymEntry.ProcedureEntry RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		List<SymEntry.ParamEntry> pl = (List<SymEntry.ParamEntry>)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            /* Add an entry for the procedure to the current scope */
            SymEntry.ProcedureEntry procEntry = currentScope.addProcedure(id, idxleft);
            if(procEntry == null) {
                errors.error(id + " already declared in this scope", idxleft);
                /* Create a dummy symbol table entry.
                 * Note that this entry isn't added to the symbol table
                 * but the RESULT attribute of ProcedureHead must return a
                 * ProcedureEntry. */
                procEntry = new SymEntry.ProcedureEntry(id, idxleft);
                procEntry.setScope(currentScope);
            }
            /* Create a new scope for the symbols local to
             * the procedure. */
            currentScope = currentScope.newScope(procEntry);

            // Adding formal params to scope
            System.out.println("Adding formal params to scope level " + currentScope.getLevel());
            for (SymEntry.ParamEntry entry: pl) {
                if (currentScope.addEntry(entry) == null) {
                    errors.error(entry.getIdent() + " repeated", entry.getLocation());
                }
            }
            // Adding formal param list to the procedure type
            procEntry.getType().setFormalParams(pl);
            RESULT = procEntry;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ProcedureHead",14, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ProcedureHead ::= KW_PROCEDURE IDENTIFIER error 
            {
              SymEntry.ProcedureEntry RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            /* On a syntax error in a procedure head a dummy ProcedureEntry is
             * returned and a new scope created to allow the parsing of the
             * block body of the procedure to be processed in the new scope.
             */
            SymEntry.ProcedureEntry procEntry = 
                new SymEntry.ProcedureEntry(id, idxleft);
            procEntry.setScope(currentScope);
            currentScope = currentScope.newScope(procEntry);
            RESULT = procEntry;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ProcedureHead",14, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OptFormalParamList ::= FormalParamList 
            {
              List<SymEntry.ParamEntry> RESULT =null;
		Location listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		List<SymEntry.ParamEntry> list = (List<SymEntry.ParamEntry>)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = list;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("OptFormalParamList",16, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OptFormalParamList ::= 
            {
              List<SymEntry.ParamEntry> RESULT =null;
		
            // If there is a formal param list, there must at least be one formal param
            // If there is no formal param list, return empty list
            List list = new ArrayList<SymEntry.ParamEntry>();
            RESULT = list;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("OptFormalParamList",16, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FormalParamList ::= FormalParam 
            {
              List<SymEntry.ParamEntry> RESULT =null;
		Location paramxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location paramxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		SymEntry.ParamEntry param = (SymEntry.ParamEntry)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            // must contain at least one param
            // FormalParam should be of type SymEntry
            List list = new ArrayList<SymEntry.ParamEntry>();
            list.add(param);
            RESULT = list;
         
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",15, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FormalParamList ::= FormalParamList COMMA FormalParam 
            {
              List<SymEntry.ParamEntry> RESULT =null;
		Location listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xleft;
		Location listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xright;
		List<SymEntry.ParamEntry> list = (List<SymEntry.ParamEntry>)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		Location paramxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location paramxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		SymEntry.ParamEntry param = (SymEntry.ParamEntry)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            list.add(param);
            RESULT = list;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",15, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FormalParam ::= KW_VAR IDENTIFIER COLON TypeIdentifier DefaultLValue 
            {
              SymEntry.ParamEntry RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		Location typeIdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location typeIdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		Type typeId = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		Location lValxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location lValxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode lVal = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            // make a new SymEntry.ParamEntry
            SymEntry.ParamEntry paramEntry = new SymEntry.ParamEntry(id, idxleft, typeId, true,
            lVal);
            paramEntry.setDefaultParam(lVal);
            // set the scope
            System.out.println("Setting formal param scope in " + currentScope.getLevel());
            paramEntry.setScope(currentScope);
            RESULT = paramEntry;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("FormalParam",32, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FormalParam ::= KW_VAR IDENTIFIER COLON TypeIdentifier 
            {
              SymEntry.ParamEntry RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		Location typeIdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location typeIdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		Type typeId = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            SymEntry.ParamEntry paramEntry = new SymEntry.ParamEntry(id, idxleft, typeId, true);
            paramEntry.setScope(currentScope);
            RESULT = paramEntry;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("FormalParam",32, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FormalParam ::= IDENTIFIER COLON TypeIdentifier DefaultCon 
            {
              SymEntry.ParamEntry RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		Location typeIdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location typeIdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		Type typeId = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		Location conxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location conxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode con = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
             SymEntry.ParamEntry paramEntry = new SymEntry.ParamEntry(id, idxleft, typeId, false,
              con);
             paramEntry.setDefaultParam(con);
             paramEntry.setScope(currentScope);
             RESULT = paramEntry;

        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("FormalParam",32, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FormalParam ::= IDENTIFIER COLON TypeIdentifier 
            {
              SymEntry.ParamEntry RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		Location typeIdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location typeIdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		Type typeId = (Type)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            SymEntry.ParamEntry paramEntry = new SymEntry.ParamEntry(id, idxleft, typeId, false);
            paramEntry.setScope(currentScope);
            RESULT = paramEntry;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("FormalParam",32, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FormalParam ::= error 
            {
              SymEntry.ParamEntry RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            SymEntry.ParamEntry paramEntry = new SymEntry.ParamEntry("formalParamError", exleft,
                new Type.ReferenceType(Type.ERROR_TYPE), false);
            paramEntry.setScope(currentScope);
            RESULT = paramEntry;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("FormalParam",32, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DefaultLValue ::= GETS LValue 
            {
              ExpNode RESULT =null;
		Location lValxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location lValxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode lVal = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = lVal;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("DefaultLValue",34, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DefaultCon ::= GETS Condition 
            {
              ExpNode RESULT =null;
		Location conxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location conxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode con = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = con;
         
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("DefaultCon",35, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CompoundStatement ::= KW_BEGIN StatementList KW_END 
            {
              StatementNode RESULT =null;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		List<StatementNode> sl = (List<StatementNode>)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            RESULT = new StatementNode.ListNode(slxleft,sl);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("CompoundStatement",21, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // StatementList ::= Statement 
            {
              List<StatementNode> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ArrayList<StatementNode>();
            RESULT.add(s);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("StatementList",19, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // StatementList ::= StatementList SEMICOLON Statement 
            {
              List<StatementNode> RESULT =null;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xright;
		List<StatementNode> sl = (List<StatementNode>)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            sl.add(s);
            RESULT = sl;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("StatementList",19, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Statement ::= KW_WHILE Condition KW_DO Statement 
            {
              StatementNode RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xright;
		ExpNode c = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.WhileNode(cxleft, c, s);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Statement ::= KW_IF Condition KW_THEN Statement KW_ELSE Statement 
            {
              StatementNode RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).xright;
		ExpNode c = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).value;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xright;
		StatementNode s1 = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		StatementNode s2 = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.IfNode(cxleft, c, s1, s2);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-5)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Statement ::= CompoundStatement 
            {
              StatementNode RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = s; 
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Statement ::= KW_READ LValue 
            {
              StatementNode RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		Location lvalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location lvalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode lval = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.AssignmentNode(lvalxleft, 
                     lval, new ExpNode.ReadNode(rxleft));
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Statement ::= KW_WRITE Exp 
            {
              StatementNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.WriteNode(exleft, e);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Statement ::= LValue ASSIGN Condition 
            {
              StatementNode RESULT =null;
		Location lvalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xleft;
		Location lvalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xright;
		ExpNode lval = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		Location rvalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location rvalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode rval = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
          RESULT = new StatementNode.AssignmentNode(lvalxleft, lval, rval);
       
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Statement ::= KW_CALL IDENTIFIER LPAREN OptActualParamList RPAREN 
            {
              StatementNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		List<ExpNode> pl = (List<ExpNode>)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 
            StatementNode.CallNode node = new StatementNode.CallNode(idxleft, id);
            for (ExpNode param: pl) {
                node.addActualParam(param);
            }
            RESULT = node;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Statement ::= error 
            {
              StatementNode RESULT =null;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = new StatementNode.ErrorNode(locxleft);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OptActualParamList ::= ActualParamList 
            {
              List<ExpNode> RESULT =null;
		Location listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		List<ExpNode> list = (List<ExpNode>)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = list;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("OptActualParamList",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OptActualParamList ::= 
            {
              List<ExpNode> RESULT =null;
		
            // A statement may not have a list of actual params
            // If it does have a list of actual params, there must be at least 1 actual param
            // If no list, return an empty list
            List list = new ArrayList<ExpNode>();
            RESULT = list;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("OptActualParamList",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ActualParamList ::= ActualParam 
            {
              List<ExpNode> RESULT =null;
		Location actualxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location actualxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode actual = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            // No empty case, must have at least one actual param
           List list = new ArrayList<ExpNode>();
           list.add(actual);
           RESULT = list;
           //TODO figure out how to do a default case
           // TODO make into sym entry whatever that is
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ActualParamList",17, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ActualParamList ::= ActualParamList COMMA ActualParam 
            {
              List<ExpNode> RESULT =null;
		Location listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xleft;
		Location listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xright;
		List<ExpNode> list = (List<ExpNode>)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		Location actualxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location actualxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode actual = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            ExpNode.ActualParamNode asNode = (ExpNode.ActualParamNode) actual;
            String id = asNode.getFormalId();
            boolean duplicate = false;
            for (ExpNode node: list) {
                ExpNode.ActualParamNode testActualNode = (ExpNode.ActualParamNode) node;
                if (testActualNode.getFormalId().equals(id)) {
                    errors.error(id + " repeated", actual.getLocation());
                    duplicate = true;
                }
            }
            if (!duplicate) {
                list.add(actual);
            }
            RESULT = list;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ActualParamList",17, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ActualParam ::= IDENTIFIER GETS Condition 
            {
              ExpNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		Location condxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location condxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode cond = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.ActualParamNode(idxleft, id, cond);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ActualParam",33, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ActualParam ::= IDENTIFIER error 
            {
              ExpNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            // error recovery at the bottom level of the parsing chain
            RESULT = new ExpNode.ErrorNode(idxleft);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("ActualParam",33, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LValue ::= IDENTIFIER 
            {
              ExpNode RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            /* At this stage the identifier could be either a constant identifier or 
             * a variable identifier but which cannot be determined until static 
             * checking when the IdentifierNode will be transformed into either
             * a ConstNode or a VariableNode or detected as invalid.
             */
            RESULT = new ExpNode.IdentifierNode(idxleft, id);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("LValue",31, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LValue ::= error 
            {
              ExpNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.ErrorNode(exleft);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("LValue",31, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Condition ::= RelCondition 
            {
              ExpNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 
            RESULT = e;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Condition",22, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // RelCondition ::= Exp 
            {
              ExpNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = e;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("RelCondition",23, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // RelCondition ::= Exp Relation Exp 
            {
              ExpNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xright;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		Operator op = (Operator)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.BinaryNode(opxleft, op, e1,e2);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("RelCondition",23, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Relation ::= EQUALS 
            {
              Operator RESULT =null;
		
            RESULT = Operator.EQUALS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Relation ::= NEQUALS 
            {
              Operator RESULT =null;
		
            RESULT = Operator.NEQUALS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Relation ::= LEQUALS 
            {
              Operator RESULT =null;
		
            RESULT = Operator.LEQUALS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Relation ::= LESS 
            {
              Operator RESULT =null;
		
            RESULT = Operator.LESS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Relation ::= GREATER 
            {
              Operator RESULT =null;
		
            RESULT = Operator.GREATER_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Relation ::= GEQUALS 
            {
              Operator RESULT =null;
		
            RESULT = Operator.GEQUALS_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Relation",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Exp ::= Term 
            {
              ExpNode RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode t = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = t;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Exp",24, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Exp ::= Exp AddOp Term 
            {
              ExpNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xright;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		Operator op = (Operator)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.BinaryNode(opxleft, op, e1,e2);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Exp",24, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // AddOp ::= PLUS 
            {
              Operator RESULT =null;
		
            RESULT = Operator.ADD_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("AddOp",28, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // AddOp ::= MINUS 
            {
              Operator RESULT =null;
		
            RESULT = Operator.SUB_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("AddOp",28, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Term ::= Factor 
            {
              ExpNode RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode f = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = f;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Term",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Term ::= Term MulOp Factor 
            {
              ExpNode RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).xright;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		Operator op = (Operator)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.BinaryNode(opxleft, op, e1,e2);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Term",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // MulOp ::= TIMES 
            {
              Operator RESULT =null;
		
            RESULT = Operator.MUL_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("MulOp",29, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // MulOp ::= DIVIDE 
            {
              Operator RESULT =null;
		
            RESULT = Operator.DIV_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("MulOp",29, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Factor ::= PLUS Factor 
            {
              ExpNode RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = e; 
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",26, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Factor ::= UnaryOperator Factor 
            {
              ExpNode RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		Operator op = (Operator)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.UnaryNode(opxleft, op, e);
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",26, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Factor ::= LPAREN Condition RPAREN 
            {
              ExpNode RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).xright;
		ExpNode c = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		
            RESULT = c;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",26, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Factor ::= NUMBER 
            {
              ExpNode RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = new ExpNode.ConstNode(nxleft, 
                    Predefined.INTEGER_TYPE, n.intValue());
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",26, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Factor ::= LValue 
            {
              ExpNode RESULT =null;
		Location lvalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xleft;
		Location lvalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$CUPParser$stack.peek()).xright;
		ExpNode lval = (ExpNode)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		
            RESULT = lval;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("Factor",26, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // UnaryOperator ::= MINUS 
            {
              Operator RESULT =null;
		
            RESULT = Operator.NEG_OP;
        
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("UnaryOperator",30, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CUPParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CUPParser$do_action(
    int                        CUP$CUPParser$act_num,
    java_cup.runtime.lr_parser CUP$CUPParser$parser,
    java.util.Stack            CUP$CUPParser$stack,
    int                        CUP$CUPParser$top)
    throws java.lang.Exception
    {
              return CUP$CUPParser$do_action_part00000000(
                               CUP$CUPParser$act_num,
                               CUP$CUPParser$parser,
                               CUP$CUPParser$stack,
                               CUP$CUPParser$top);
    }
}

}
